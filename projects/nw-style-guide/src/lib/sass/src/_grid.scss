@use './mixins/grid-framework';
@use './mixins/grid';
@use './variables';
//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include grid.container-fixed;

  @media (min-width: variables.$screen-sm-min) {
    width: variables.$container-sm;
  }
  @media (min-width: variables.$screen-md-min) {
    width: variables.$container-md;
  }
  @media (min-width: variables.$screen-lg-min) {
    width: variables.$container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include grid.container-fixed;
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  @include grid.make-row;
}

.row-no-gutters {
  margin-right: 0;
  margin-left: 0;

  [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}


// Columns
//
// Common styles for small and large grid columns

@include grid-framework.make-grid-columns;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include grid-framework.make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: variables.$screen-sm-min) {
  @include grid-framework.make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: variables.$screen-md-min) {
  @include grid-framework.make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: variables.$screen-lg-min) {
  @include grid-framework.make-grid(lg);
}
