//== Colors
//
$gray-base: #232323 !default;
$primary-base: #3d81ff !default;
$secondary-base: #3c8f9a !default;
$tertiary-base: #ff3d64 !default;
$alt-base: #ffcc33 !default;
$coolgray-base: #333c4e !default;

$gray-color-settings: (
    "name": "gray",
    "color": $gray-base,
    "light-steps": (8, 16, 36, 48, 60, 72, 78),
    "dark-steps": (-8)
);

$alt-color-settings: (
    "name": "alt",
    "color": $alt-base,
    "light-steps": (8, 16, 24, 32, 36, 40),
    "dark-steps": (-8)
);

$tertiary-color-settings: (
    "name": "tertiary",
    "color": $tertiary-base,
    "light-steps": (4, 16, 24, 32, 36, 40),
    "dark-steps": (-8)
);

$secondary-color-settings: (
    "name": "secondary",
    "color": $secondary-base,
    "light-steps": (10, 20, 30, 40, 50, 60),
    "dark-steps": (-8)
);

$primary-color-settings: (
    "name": "primary",
    "color": $primary-base,
    "light-steps": (4, 16, 24, 32, 36, 40),
    "dark-steps": (-8)
);

$coolgray-color-settings: (
    "name": "coolgray",
    "color": $coolgray-base,
    "light-steps": (8, 16, 36, 48, 60, 72),
    "dark-steps": (-8)
);

$color-settings-maps: (
    $gray-color-settings,
    $alt-color-settings,
    $tertiary-color-settings,
    $secondary-color-settings,
    $primary-color-settings,
    $coolgray-color-settings
);

@function get-color($variant, $shade: base) {
    @each $color-settings in $color-settings-maps {
        $name: map-get($color-settings, name);

        @if $name == $variant {

            @if $shade == base {
                @return map-get($color-settings, color);
            }

            @if $shade == dark {
                $darken-by: nth(map-get($color-settings, dark-steps), 1);
                @return darken(map-get($color-settings, color), $darken-by * -1);
            }

            @if $shade == light {
                $lighten-by: nth(map-get($color-settings, light-steps), 1);
                @return lighten(map-get($color-settings, color), $lighten-by);
            }

            @if $shade == x-light {
                $lighten-by: nth(map-get($color-settings, light-steps), 2);
                @return lighten(map-get($color-settings, color), $lighten-by);
            }

            @if $shade == 2x-light {
                $lighten-by: nth(map-get($color-settings, light-steps), 3);
                @return lighten(map-get($color-settings, color), $lighten-by);
            }

            @if $shade == 3x-light {
                $lighten-by: nth(map-get($color-settings, light-steps), 4);
                @return lighten(map-get($color-settings, color), $lighten-by);
            }

            @if $shade == 4x-light {
                $lighten-by: nth(map-get($color-settings, light-steps), 5);
                @return lighten(map-get($color-settings, color), $lighten-by);
            }

            @if $shade == 5x-light {
                $lighten-by: nth(map-get($color-settings, light-steps), 6);
                @return lighten(map-get($color-settings, color), $lighten-by);
            }

            @if $shade == 6x-light {
                $lighten-by: nth(map-get($color-settings, light-steps), 7);
                @return lighten(map-get($color-settings, color), $lighten-by);
            }

            @error "Error: `#{$shade}` is not a valid value for $shade.";
            @return false;
        }
    }
}
