@use './variables' as vars;
@use './mixins/forms';
@use './color-palette' as palette;
//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
    padding: 0;
    margin: 0;
    border: 0;
    // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
    // so we reset that to ensure it behaves more like a standard block element.
    // See https://github.com/twbs/bootstrap/issues/12359.
    min-width: 0;
}

label {
    font-size: 14px;
    display: inline-block;
    max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
    margin-bottom: 4px;
    font-weight: normal;
    color: vars.$text-color;
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
    margin: 4px 0 0;
    line-height: normal;
}

input[type="file"] {
    display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
    display: block;
    width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
    height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
    @include forms.form-control-focus;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
    display: block;
    width: 100%;
    height: 32px; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    padding: vars.$padding-base-vertical vars.$padding-base-horizontal;
    font-size: 14px;
    line-height: vars.$line-height-base;
    color: vars.$input-color;
    background-color: vars.$input-bg;
    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    border: 1px solid vars.$input-border;
    border-radius: vars.$input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
    transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;

    ::placeholder { color: vars.$input-color-placeholder; }
    &::-moz-placeholder { color: vars.$input-color-placeholder; }
    &::-webkit-input-placeholder  { color: vars.$input-color-placeholder; }

    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &[disabled],
    &[readonly],
    fieldset[disabled] & {
        opacity: 0.5;
    }

    &[disabled],
    fieldset[disabled] & {
        cursor: vars.$cursor-disabled;
    }

    &:focus {
        // Customize the `:focus` state to imitate native WebKit styles.
        @include forms.form-control-focus;
    }
    // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
textarea.form-control {
    height: auto;
    resize: vertical;
    line-height: 1.4;
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
    margin-bottom: vars.$form-group-margin-bottom;
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.radio,
.checkbox {
    position: relative;
    display: block;
    margin-bottom: 8px;

    label {
        font-weight: normal;
        cursor: pointer;
        line-height: 12px;
        padding-left: 0;
        margin-bottom: 0;
        display: inline-flex;
        align-items: center;
        color: vars.$text-color-secondary;

        &:before {
            font-family: "Font Awesome 5 Pro";
            font-weight: 900;
            content: "\f00c";
            position: relative;
            background-color: vars.$text-color;
            color: transparent;
            width: 16px;
            min-width: 16px;
            height: 16px;
            padding-top: 1px;
            margin-right: 8px;
            border-radius: vars.$border-radius-base;
            font-size: 10px;
            text-align: center;
            transition-property: background;
            transition-timing-function: ease-in-out;
            transition-duration: 100ms;
        }
    }
    input[type="radio"],
    input[type="checkbox"] {
        position: absolute;
        margin-left: -20px;
        margin-top: 4px \9;
        display: none;

        &:checked {
            ~ label {
                &:before {
                    background-color: palette.get-color("primary", base);
                    color: vars.$text-color;
                }
            }
        }
        &:disabled {
            ~ label {
                cursor: not-allowed;
                opacity: 0.5;
            }
        }
        &:focus {
            ~ label:before {
                @include forms.form-control-focus(vars.$input-border-focus, 2px);
            }
        }
    }
}

.checkbox {
    label {
        &:before {
            border: 1px solid vars.$input-border;
        }
    }
    input:checked {
        ~ label {
            &:before {
                border: 1px solid transparent;
            }
        }
    }
    &.checkbox-exclusion {
        label {
            &:before {
                content: "\f00d";
            }
        }
        input[type="checkbox"]:checked {
            ~ label {
                &:before {
                    background: palette.get-color("tertiary", base);
                }
            }
        }
    }
    &.checkbox-placeholder {
        input[type="checkbox"]:not(:checked) {
            ~ label:before {
                color: rgba(vars.$level0, 0.4);
            }
        }
    }
}

.radio {
    label:before {
        content: " ";
        border: 6px solid vars.$divider-color-secondary;
        border-radius: 50%;
        transition-property: border-color;
        transition-timing-function: ease-in-out;
        transition-duration: 300ms;
    }
    input[type="radio"]:checked {
        ~ label:before {
            border-color: palette.get-color("primary", base);
            background: vars.$text-color;
        }
    }
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
    &[disabled],
    &.disabled,
    fieldset[disabled] & {
        cursor: vars.$cursor-disabled;
    }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
    &.disabled,
    fieldset[disabled] & {
        label {
            cursor: vars.$cursor-disabled;
        }
    }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

@include forms.input-size(
    '.input-sm',
    vars.$input-height-small,
    vars.$padding-small-vertical,
    vars.$padding-small-horizontal,
    vars.$font-size-small,
    vars.$line-height-small,
    vars.$input-border-radius-small
);
.form-group-sm {
    .form-control {
        height: vars.$input-height-small;
        padding: vars.$padding-small-vertical vars.$padding-small-horizontal;
        font-size: vars.$font-size-small;
        line-height: vars.$line-height-small;
        border-radius: vars.$input-border-radius-small;
    }
    select.form-control {
        height: vars.$input-height-small;
        line-height: vars.$input-height-small;
    }
    textarea.form-control,
    select[multiple].form-control {
        height: auto;
    }
}

@include forms.input-size(
    '.input-lg',
    vars.$input-height-large,
    vars.$padding-large-vertical,
    vars.$padding-base-horizontal,
    vars.$font-size-large,
    vars.$line-height-large,
    vars.$input-border-radius-large
);
.form-group-lg {
    .form-control {
        height: vars.$input-height-large;
        padding: vars.$padding-large-vertical vars.$padding-base-horizontal;
        font-size: vars.$font-size-large;
        line-height: vars.$line-height-large;
        border-radius: vars.$input-border-radius-large;
    }
    select.form-control {
        height: vars.$input-height-large;
        line-height: vars.$input-height-large;
    }
    textarea.form-control,
    select[multiple].form-control {
        height: auto;
    }
}

// Feedback states
.has-success {
    @include forms.form-control-validation(vars.$state-success-text, vars.$state-success-border, vars.$state-success-bg);
}
.has-warning {
    @include forms.form-control-validation(vars.$state-warning-text, vars.$state-warning-border, vars.$state-warning-bg);
}
.has-error {
    @include forms.form-control-validation(vars.$state-danger-text, vars.$state-danger-border, vars.$state-danger-bg);
}

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
    display: block; // account for any element using help-block
    margin-top: 5px;
    margin-bottom: 10px;
    color: lighten(vars.$text-color, 25%); // lighten the text some for contrast
    font-size: 12px;
}

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.
.switch {
    label {
        float: left;
        line-height: 32px;
        cursor: pointer;
        margin-bottom: 0;
        color: vars.$text-color-secondary;

        &.switch-toggle {
            position: relative;
            content: " ";
            display: inline-block;
            background-color: rgba(vars.$text-color, 0.15);
            height: 32px;
            width: 65px;
            border-radius: 16px;
            font-size: 16px;
            font-weight: lighter;
            color: vars.$text-color;
            overflow: hidden;
            margin-right: 10px;
            transition-property: background-color;
            transition-timing-function: ease-in-out;
            transition-duration: 300ms;

            .on-off {
                display: inline-block;
                position: absolute;
                top: 3px;
                left: 3px;
                background-color: vars.$text-color;
                height: 26px;
                width: 26px;
                line-height: 28px;
                border-radius: 50%;
                transition-property: left;
                transition-timing-function: ease-in-out;
                transition-duration: 300ms;
                box-shadow: 0 1px 1px rgba(0,0,0,0.3);

                &::before,
                &:after {
                    width: 30px;
                    display: block;
                    position: absolute;
                }
                &:before {
                    content: "On";
                    margin-left: -28px;
                }
                &:after {
                    content: "Off";
                    margin-left: 32px;
                }
                &.no-text {
                    &:before,
                    &:after {
                        content: "";
                    }
                }
            }
        }
    }
    input {
        position: absolute;
        width: 0;
        height: 0;
        opacity: 0;

        &:checked {
            ~ label.switch-toggle {
                background-color: palette.get-color("secondary", base);

                .on-off {
                    left: 36px;
                }
            }
        }
        &:disabled {
            ~ label {
                cursor: not-allowed;
                opacity: 0.5;
            }
        }
        &:focus {
            ~ label.switch-toggle {
                @include forms.form-control-focus(vars.$input-border-focus, 2px);
            }
        }
    }
    &.switch-sm {
        @include forms.switch(24px);
    }
    &.switch-xs {
        @include forms.switch(18px);
    }
    &.switch-pause {
        .switch-toggle {
            background-color: palette.get-color("alt", base);
        }
    }
}
